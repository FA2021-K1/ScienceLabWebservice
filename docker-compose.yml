version: '3.9'

services:
  frontend:
    container_name: "frontend"
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_SCIENCE_LAB_MAP_ACCESS_TOKEN=${REACT_APP_SCIENCE_LAB_MAP_ACCESS_TOKEN}
        - REACT_APP_SCIENCE_LAB_WEB_SERVICE_API=/api
    expose:
      # The frontend is only exposed internally to the reverse proxy
      - "80"
    labels:
      # Expose the service via traefik
      - "traefik.enable=true"
      # Forward all traffic that is not for the API
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    depends_on:
      - science-lab-web-service

  # Science Lab Web Service
  science-lab-web-service:
    container_name: "science-lab-web-service"
    hostname: "webservice"
    build:
      context: .
      dockerfile: ./WebService/Dockerfile
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      LOGSTASH_HOST: ${LOGSTASH_HOST}
      LOGSTASH_PORT: ${LOGSTASH_PORT}
    expose:
      # The webservice is exposed internally to the reverse proxy
      - "8080"
    ports:
      # Expose the webservice externally so the API can be used
      # 8080 on the container is mapped to 8080 on the server/VM/your Machine.
      - "8080:8080"
    # Pass the desired port to the Apodini web service
    command: [ "--port", "8080" ]
    labels:
      # Expose the service via traefik
      - "traefik.enable=true"
      # Forward all traffic incoming at /api
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.middlewares.backend_stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=backend_stripprefix@docker"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    depends_on:
      # Wait for PostreSQL, ES and Prometheus to start
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      prometheus:
        condition: service_started
    restart: always

  traefik:
    image: "traefik:v2.6"
    container_name: "traefik"
    hostname: "traefik"
    command:
      # Enabling docker provider
      - "--providers.docker=true"
      # Don't expose all services by default
      - "--providers.docker.exposedByDefault=false"
      # Traefik will listen to incoming requests on port 80 (HTTP) and forward them from the `web` entrypoint.
      - "--entrypoints.web.address=:80"
      # Enable the web UI
      # - "--api.insecure=true"
    ports:
      # 80 on the container is mapped to 80 on the server/VM/your Machine.
      - "80:80"
      # The web UI
      # - "8081:8080"
    volumes:
      # Traefik needs the docker.sock to detect new docker containers
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  # PostgreSQL database for persistent data storage
  postgres:
    image: "postgres"
    container_name: "postgres"
    hostname: "postgres"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      # 5432 on the container is mapped to 5432 on the server/VM/your Machine.
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      # Persist data even if container shuts down
      - database-data:/var/lib/postgresql/data/

  elasticsearch:
    container_name: "elasticsearch"
    hostname: "elasticsearch"
    build:
      context: Observability/elasticsearch/
      args:
        ELK_VERSION: ${ELK_VERSION}
    environment:
      xpack.security.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
      ELASTIC_USER: ${ELASTIC_USER}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    volumes:
      - type: bind
        source: ./Observability/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    expose:
      - "9200"
      - "9300"
    restart: always

  logstash:
    container_name: "logstash"
    hostname: "logstash"
    build:
      context: Observability/logstash/
      args:
        ELK_VERSION: ${ELK_VERSION}
    volumes:
      - type: bind
        source: ./Observability/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
      - type: bind
        source: ./Observability/logstash/pipeline
        target: /usr/share/logstash/pipeline
    expose:
      - "31311" # For HTTP connection
      - "5044"
      - "5000/tcp"
      - "5000/udp"
      - "9600"
    environment:
      xpack.monitoring.enabled: "true"
      xpack.monitoring.elasticsearch.hosts: '["http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"]'
      xpack.monitoring.elasticsearch.username: ${ELASTIC_USER}
      xpack.monitoring.elasticsearch.password: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT}
      ELASTICSEARCH_USER: ${ELASTIC_USER}
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    restart: always
    depends_on:
      - elasticsearch

  kibana:
    container_name: "kibana"
    hostname: "kibana"
    build:
      context: Observability/kibana/
      args:
        ELK_VERSION: ${ELK_VERSION}
    environment:
      ELASTICSEARCH_HOSTS: '["http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"]'
      ELASTICSEARCH_USERNAME: ${ELASTIC_USER}
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
    volumes:
      - type: bind
        source: ./Observability/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    restart: always
    depends_on:
      - elasticsearch

  prometheus:
    image: "prom/prometheus"
    container_name: "prometheus"
    hostname: "prometheus"
    ports:
      - "9090:9090"
    volumes:
      - ./Observability/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always

  grafana:
    image: "grafana/grafana"
    container_name: "grafana"
    hostname: "grafana"
    user: "472"
    ports:
      # 3000 on the container is mapped to 4000 on the server/VM/your Machine.
      - "4000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./Observability/grafana/:/etc/grafana/
    env_file:
      - ./Observability/grafana/config.monitoring
    restart: always
    depends_on:
      - prometheus

volumes:
  database-data: # Volume for PostgreSQL
  elasticsearch: # Volume for ElasticSearch
  prometheus_data: # Volume for Prometheus
  grafana_data: # Volume for Grafana
