version: "3.9"

services:
  frontend:
    container_name: "frontend"
    build:
      context: ./frontend
      dockerfile: Dockerfile
    working_dir: "/app"
    volumes:
      - "./frontend:/app"
      - "/usr/app/node_modules"
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.port=3000"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
    depends_on:
      - science-lab-web-service
  # Science Lab Web Service
  science-lab-web-service:
    container_name: "science-lab-web-service"
    hostname: "webservice"
    image: "ghcr.io/fa21-collaborative-drone-interactions/sciencelabwebservice:develop"
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      LOGSTASH_HOST: ${LOGSTASH_HOST}
      LOGSTASH_PORT: ${LOGSTASH_PORT}
    expose:
      - "6969"
    # Pass the desired port to the Apodini web service
    command: ["--port", "6969"]
    labels:
      # The domain the service will respond to
      - "traefik.http.routers.backend.rule=Host(`localhost`)"
      # Allow request only from the predefined entry point named "web"
      - "traefik.http.routers.backend.entrypoints=data"
    # Wait for PostreSQL, ES and Prometheus to start
    depends_on:
      - postgres

  # Reverse Proxy to protect our service from direct access
  traefik:
    image: "traefik:v2.4"
    container_name: "traefik"
    hostname: "traefik"
    command:
      # Enabling docker provider
      - "--providers.docker=true"
      # Traefik will listen to incoming request on the port 80 (HTTP)
      - "--entrypoints.web.address=:80"
      - "--entrypoints.data.address=:6969"
    ports:
      # 80 on the container is mapped to 80 on the server/VM/your Machine.
      - "80:80"
      - "6969:6969"
    # Traefik needs the docker.sock to detect new docker container
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    # Wait for PostreSQL to start
    depends_on:
      - science-lab-web-service
      - frontend

  # PostgreSQL database for persistent data storage
  postgres:
    image: "postgres"
    container_name: "postgres"
    hostname: "postgres"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      # 5432 on the container is mapped to 5432 on the server/VM/your Machine.
      - "5432:5432"
    volumes:
      - database-data:/var/lib/postgresql/data/ # Persist data even if container shuts down
volumes:
  database-data: # Volume for PostgreSQL
