version: "3.9"

services:
  frontend:
    container_name: "frontend"
    image: "ghcr.io/fa21-collaborative-drone-interactions/sciencelabfrontend:develop"
    working_dir: "/app"
    expose:
      - "80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`drones.zack-bumm.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
  # Science Lab Web Service
  science-lab-web-service:
    container_name: "science-lab-web-service"
    hostname: "webservice"
    image: "ghcr.io/fa21-collaborative-drone-interactions/sciencelabwebservice:develop"
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      LOGSTASH_HOST: ${LOGSTASH_HOST}
      LOGSTASH_PORT: ${LOGSTASH_PORT}
    expose:
      - "80"
    # Pass the desired port to the Apodini web service
    command: ["--port", "80"]
    labels:
      # The domain the service will respond to
      - "traefik.http.routers.backend.rule=Host(`data.zack-bumm.com`)"
      # Allow request only from the predefined entry point named "web"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
    depends_on:
      - postgres

  # Reverse Proxy to protect our service from direct access
  traefik:
    image: "traefik:v2.4"
    container_name: "traefik"
    hostname: "traefik"
    restart: unless-stopped
    command:
      # Enabling docker provider
      - "--providers.docker=true"
      # Traefik will listen to incoming request on the port 80 (HTTP)
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=c.gruber@tum.de"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    labels:
      # Redirect all HTTP traffic to HTTPS
      - traefik.http.routers.to-https.rule=Host(`drones.zack-bumm.com`) || Host(`data.zack-bumm.com`)
      - traefik.http.routers.to-https.entrypoints=web
      - traefik.http.routers.to-https.middlewares=to-https
      - traefik.http.middlewares.to-https.redirectscheme.scheme=https
    ports:
      # 80 on the container is mapped to 80 on the server/VM/your Machine.
      - "80:80"
      - "443:443"
    # Traefik needs the docker.sock to detect new docker container
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    # Wait for PostreSQL to start
    depends_on:
      - science-lab-web-service

  # PostgreSQL database for persistent data storage
  postgres:
    image: "postgres"
    container_name: "postgres"
    hostname: "postgres"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      # 5432 on the container is mapped to 5432 on the server/VM/your Machine.
      - "5432:5432"
    volumes:
      - database-data:/var/lib/postgresql/data/ # Persist data even if container shuts down

volumes:
  database-data: # Volume for PostgreSQL

networks:
  web:
    external: true
